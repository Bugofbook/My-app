{"version":3,"sources":["data/pagesconster.js","components/menu/MainMenu.js","redux/constants.js","components/ui/Gamelocalstore.js","components/ui/Gameinfo.js","components/ui/Square.js","components/ui/Board.js","components/ui/GameMain.js","components/ui/page.js","functions/gamebasics.js","functions/connectgame.js","components/contain/TioTeoTic.js","components/contain/othello.js","functions/catchgame.js","components/contain/home.js","components/contain/contain.js","redux/actions/GameDataAction.js","redux/actions/PlayerDataAction.js","components/menu/initialstatedata.js","data/gamerule.js","components/menu/pages.js","redux/reducers/PlayerDataReducers.js","redux/reducers/GameDataReducer.js","redux/Store.js","index.js"],"names":["PAGES","id","router","zh_name","selectedStyle","backgroundColor","color","MainMenu","react_default","a","createElement","className","NavLink","to","map","page","index","key","activeStyle","concat","GAMEDATA","PLAYERDATA","GameLocalStore","_ref","_ref$store","store","_ref$deldata","deldata","f","_ref$loadingdata","loadingdata","length","gamedata","type","value","style","width","onClick","date","toLocaleString","GameInFo","_ref$players","players","_ref$history","history","_ref$info","info","_ref$adddata","adddata","_ref$jumpto","jumpto","Gameinfo_GameEndBottom","gamestate","Gameinfo_GameStepShow","list","actionlists","step","GameEndBottom","_ref2","_ref2$gamestate","_ref2$adddata","GameStepShow","_ref3","_ref3$history","_ref3$players","_ref3$list","_ref3$jumpto","_element","libotton","owner","rowskey","columnskey","readOnly","Square","_ref$value","_ref$className","showChess","height","borderRadius","border","Row","_ref$rows","rows","_ref$rowclass","rowclass","_ref$change","change","columns","columnkey","ui_Square","classname","Board","_ref2$Squares","Squares","_ref2$boardclass","boardclass","_ref2$change","Board_Row","GameMain","_ref$current","current","gamerule","_ref$mainchange","mainchange","gamename","showgamestate","ui_Board","squares","winner","loser","nowplayer","GamePage","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","setState","initialstate","state","slice","gameinfo","objectSpread","turns","window","setTimeout","chesshistory","reduce","_previousValue","action","bind","assertThisInitialized","inherits","createClass","_this2","_this$state","_this$props","GameMain_GameMain","Gameinfo_GameInFo","Gamelocalstore_GameLocalStore","localstore","React","Component","setChessToSquares","chess","lock","addChessToLists","arguments","undefined","SquaresDeepCopy","CopySquares","i","ilen","Nowrows","j","jlen","assign","FindLength","VectorX","VectorY","connectlength","CurrentPoint","NowSquares","Value","contilen","CheckValue","lengthx","tapointx","tapointy","Rowlength","Columnlength","Slashlength","BackSlashlength","removeOldChess","ProcessObject","lists","oldchess","filter","_chess","addNewChess","ConeectJudge","JudgeWinner","TioTeoTicSpecialForm","_GamePage","_getPrototypeOf2","_len","args","Array","_key","apply","player","newsquares","newchess","processobject","compose","showlists","TioTeoTicForm","_GamePage2","_getPrototypeOf3","_len2","_key2","GomokuForm","_GamePage3","_getPrototypeOf4","_this3","_len3","_key3","OthelloForm","JudgeGame","organizeBoard","player1chess","player2chess","changeArrays","resultArray","targetvalue","vec","Math","floor","jth","tavalue","calculationArrays","accumulator","currentValue","changenumber","presquares","nowchess","HomeForm","movegamedata","moveplayerdata","playerdata","clear","loadingonlinedata","processdata","url","fetch","then","response","json","onlinedata","data","player1","player2","gameDatas","mapDispatchToProps","dispatch","DelGameData","v4","Date","AddGameData","HOCforconnect","component","connect","playerData","mapStateToProps","TioTeoTicSpecialGame","TioTeoTicGame","GomokuGame","OthelloGame","HomePage","ChangePlayerName","makeEmptyBoard","row","column","fill","makeGameHistoryObject","board","objecta","makeGameInfoObject","TicTacToeBoard","TicTacToeNeedKey","TicTacToeInitialData","TicTacToeSpecialInitialData","GomokuInitialData","OthelloStartBoard","OthelloInitialData","TicTacToeRule","Fragment","TicTacToeSpecialRule","GomokuRule","OthelloRule","PageTemplate","children","MainMenu_MainMenu","Home","pages_PageTemplate","TicTacToe","TicTacToeSpecial","Gomoku","Othello","Whoops404","location","pathname","gameData","initialDate","logger","next","saver","result","localStorage","JSON","stringify","getState","initialState","applyMiddleware","createStore","combineReducers","parse","storeFactory","render","es","HashRouter","Switch","Route","exact","path","Pages","document","getElementById"],"mappings":"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","file":"static/js/main.6b5feac0.chunk.js","sourcesContent":["export const PAGES = [\n\t{\n\t\tid: \"TicTacToe\",\n\t\trouter: \"/TicTacToe\",\n\t\tzh_name: \"井字棋\"\n\t},\n\t{\n\t\tid: \"TicTacToeSpecial\",\n\t\trouter: \"/TicTacToeSpecial\",\n\t\tzh_name: \"井字棋變化版\"\n\t},\t\n\t{\n\t\tid: \"Gomoku\",\n\t\trouter: \"/Gomoku\",\n\t\tzh_name: \"五子棋\"\n\t},\t\n\t{\n\t\tid: \"Othello\",\n\t\trouter: \"/Othello\",\n\t\tzh_name: \"黑白棋\"\n\t}\n]\n","import React from 'react';\nimport { NavLink } from 'react-router-dom'\nimport { PAGES } from \"../../data/pagesconster\";\nimport '../../stylesheets/menus.scss'\n\n\nconst selectedStyle = {\n    backgroundColor: \"white\",\n    color: \"slategray\"\n}\n\nexport const MainMenu = () => \n    <nav className=\"main-menu\">\n        <NavLink to=\"/\" >\n            [首頁]\n        </NavLink>\n        {// Use conster of Pages to map NavLink\n            PAGES.map((page,index) => {\n            return <NavLink key={index} to ={page.router} activeStyle={selectedStyle}>{`[${page.zh_name}]`}</NavLink>\n        })}\n    </nav>\n\nexport const TopMenu = ({ match , children }) =>\n<ul className=\"TopMenu\">\n    {/* NO make */ }\n</ul>\n","\nexport const GAMEDATA = {\n\tADD_GAMEDATA: \"ADD_GAMEDATA\",\n\tDEL_GAMEDATA: \"DEL_GAMEDATA\",\n\tLOADING_GAMEDATA: \"LOADING_GAMEDATA\",\n}\n\nexport const PLAYERDATA = {\n\tRE_NAME:\"RE_NAME\",\n}","import React from 'react';\n\nexport const GameLocalStore = ({store=[], deldata=f=>f, loadingdata=f=>f}) =>\n<div className=\"game-localstore\">\n\t<h2>本機存檔{/*Local Save*/}</h2>\n\t<p>這裡是本機存檔的列表</p>\n\t<p>按下時間的按鍵，就可以把存檔的記錄再從頭表演一次</p>\n\t<p>按下\"Ｘ\"按鍵，就可以把對應的存檔刪除</p>\n\t{(store.length === 0) ?\n\t\t<p>No Local Save</p> :\n\t\t<ol>\n\t\t\t{store.map((gamedata) => \n\t\t\t\t<li key={gamedata.id}>\n\t\t\t\t\t<input type=\"bottom\" value=\"X\" style={{width: 15 }}  onClick={() => deldata(gamedata.id)} />\n\t\t\t\t\t<input type=\"bottom\" value={`Time: ${gamedata.date.toLocaleString('zh-cn')} `} onClick={() => loadingdata(gamedata)} />\n\t\t\t\t</li>\n\t\t\t)}\n\t\t</ol>\n\t}\n</div>","import React from 'react';\n\nexport const GameInFo = ({players={},history=[], info={}, adddata=f=>f ,jumpto=f=>f}) =>\n<div className=\"game-info\" >\n<h2>遊戲歷程{/*Game Step*/}</h2>\n<p>點擊按鍵，可以跳到特定的狀態。{/*there are all steps in the game , click bottom for  jumping to special state of Game*/}</p>\n<p>遊戲結束時，可以把記錄存在本機。{/*When game is end , you can save data to local*/}</p>\n<GameEndBottom gamestate={info.gamestate} adddata={() => adddata()}/>\n<GameStepShow history={history} players={players} list={info.actionlists} jumpto={(step) => jumpto(step)} />\n{\n\t// (info.gamestate === \"Game End\") ?\n\t// <input type=\"bottom\" value=\"Save Result\" onClick={() => adddata(info.gamename,info.actionlists)} /> :\n\t// <p></p>\n}\n<ol>\n{\n\t// history.map((_element,step) => {\n\t// \tconst libotton = step ?\n\t// \t`${players[info.actionlists[step - 1].owner]} Push chess to ( ${info.actionlists[step - 1].rowskey + 1},${info.actionlists[step - 1].columnskey + 1} )` :\n\t// \t`Go to Start`\n\t// \treturn (\n\t// \t\t<li key={step}>\n\t// \t\t<input type=\"bottom\" value={libotton} onClick={() => jumpto(step)} readOnly/>\n\t// \t\t</li>\n\t// \t\t)\n\t// \t})\n}\n</ol>\n</div>\n\nconst GameEndBottom = ({gamestate=\"Game Playing\", adddata=f=>f}) =>\n(gamestate === \"Game End\") ?\n<input type=\"bottom\" value=\"Save Result\" onClick={() => adddata()} /> :\n<p></p>\n\nconst GameStepShow = ({history=[], players={} , list=[],jumpto=f=>f}) =>\n<ol>\n{\n\thistory.map((_element,step) => {\n\t\tconst libotton = step ?\n\t\t`${players[list[step - 1].owner]} Push chess to ( ${list[step - 1].rowskey + 1},${list[step - 1].columnskey + 1} )` :\n\t\t`Go to Start`\n\t\treturn (\n\t\t\t<li key={step}>\n\t\t\t<input type=\"bottom\" value={libotton} onClick={() => jumpto(step)} readOnly/>\n\t\t\t</li>\n\t\t\t)\n\t\t})\n}\n</ol>","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Square = ({ value='none', className='square', onClick}) =>\n  <button className={className} onClick={onClick}>\n        <div style={showChess(value)}></div>\n  </button>\n\nexport default Square\n\n\nSquare.propTypes = {\n  value: PropTypes.string,\n  className: PropTypes.string,\n  onClick : PropTypes.func\n}\n\nconst showChess = (value) => {\n  switch (value) {\n    case \"BlackChess\":\n      return {\n        width: \"20px\",\n        height: \"20px\",\n        borderRadius:\"10px\",\n        backgroundColor: \"Black\",\n        border: \"1px solid #4d4d4d\",\n      }\n      case \"WhiteChess\":\n        return {\n          width: \"20px\",\n          height: \"20px\",\n          borderRadius:\"10px\",\n          backgroundColor: \"white\",  \n          border: \"1px solid #4d4d4d\",\n        }\n    default:\n      return {\n        width: \"20px\",\n        height: \"20px\",\n        borderRadius:\"10px\",\n      }\n  }\n}\n\n/*\nconst selectedStyle = {\n    backgroundColor: \"white\",\n    color: \"slategray\"\n}\n*/","import React from 'react'\nimport Square from './Square'\nimport PropTypes from 'prop-types'\n\nconst Row = ({rows=[] , rowclass='board-row' , change=f=>f}) =>\n  <div className={rowclass} >\n    {rows.map((columns , columnkey ) =>\n      <Square \n        className={columns.classname}\n        value={columns.value}\n        key={columnkey}\n        onClick={() => change(columnkey)}\n      />\n      )}\n  </div>\n\nconst Board = ({ Squares=[] , boardclass='board', change=f=>f}) =>\n  <div className={boardclass}>\n    {Squares.map((rows, rowskey) =>\n      <div className=\"board-row\" key={rowskey}>\n        <Row rows={rows} key={rowskey} change={(columnkey) => change(rowskey, columnkey)} />\n      </div>\n    )}\n  </div>\n\nexport default Board\n\nBoard.propTypes = {\n  Squares: PropTypes.array,\n  className: PropTypes.string,\n  onClick : PropTypes.func\n}\n\nRow.propTypes = {\n  rows: PropTypes.array,\n  className: PropTypes.string,\n  onClick : PropTypes.func\n}\n\n\n\n","import React from 'react';\nimport Board from './Board'\n\n\nexport const GameMain = ({current={}, info= {}, players={},gamerule,mainchange=f=>f}) =>\n<div className=\"game-board\">\n\t<h1>{info.gamename}</h1>\n\t<h2>{showgamestate(info,current,players)}</h2>\n\t<Board \n\t\tSquares= {current.squares} \n\t\tclassName='board' \n\t\tchange={(rowskey, columnskey) => mainchange(rowskey, columnskey)}\n\t/>\n\t<h2>本遊戲的說明</h2>\n\t<ol>{gamerule}</ol>\n</div>\n\nconst showgamestate = (info,current,players) =>{\n\tif (info.gamestate === \"Game End\") {\n\tif (info.winner !== \"No Winner\") {\n\t\treturn `Winner is ${players[info.winner]}, Loser is ${players[info.loser]}`\n\t}\n\telse {\n\t\treturn `The Ｇame ended in a tie.`\n\t}\n}\nelse {\n\treturn `${players[current.nowplayer]} ,  Please push your Chess`\n}}\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { GameLocalStore } from \"./Gamelocalstore\";\nimport { GameInFo } from \"./Gameinfo\";\nimport { GameMain } from \"./GameMain\";\nimport '../../stylesheets/page.css'\n\n\nexport \tclass  GamePage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state =  this.props.initialstate\n\t\tthis.mainchange = this.mainchange.bind(this)\n\t\tthis.loadingdata = this.loadingdata.bind(this)\n\t\tthis.adddata = this.props.adddata\n\t\tthis.deldata = this.props.deldata\t\t\n\t}\n\tmainchange = () => {\n\t\t// Need compoent to make \n\t\tconsole.log(\"Sorry, you did not make the method\")\n\t}\n\tjumpto = (step) => {\n\t\tif (step === 0) {\n\t\t\tthis.setState(this.props.initialstate)\n\t\t}\n\t\tthis.setState({\n\t\t\thistory: this.state.history.slice(0,step + 1),\n\t\t\tgameinfo: {\n\t\t\t\t...this.state.gameinfo,\n\t\t\t\tturns: step,\n\t\t\t\tactionlists: this.state.gameinfo.actionlists.slice(0, step),\n\t\t\t\tgamestate: \"Game Playing\"\n\t\t\t}}\n\t\t\t)\n\t\t}\n\t// \n\tloadingdata = (gamedata) => {\n\t\twindow.setTimeout(( () => this.jumpto(0) ), 0)\n\t\tgamedata.chesshistory.reduce((_previousValue,action,index) => window.setTimeout(( () => this.mainchange(action.rowskey, action.columnskey) ), 1000 * index + 1000), 0)\n\t}\n\trender() {\n\t\tconst { history, gameinfo: info} = this.state\n//\t\tconst info = this.state.gameinfo\n\t\tconst {players, gamerule} = this.props\n\t\tconst current = history[info.turns]\n\t\t\treturn (\n\t\t\t\t<section className=\"game\" >\n\t\t\t\t\t<GameMain\n\t\t\t\t\t\tcurrent={current}\n\t\t\t\t\t\tinfo= {info} \n\t\t\t\t\t\tplayers={players} \n\t\t\t\t\t\tgamerule={gamerule} \n\t\t\t\t\t\tmainchange={(rowskey, columnskey) => this.mainchange(rowskey, columnskey)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t<GameInFo \n\t\t\t\t\t\tplayers={players} \n\t\t\t\t\t\thistory={history} \n\t\t\t\t\t\tinfo={info} \n\t\t\t\t\t\tadddata={()=>this.adddata(info.gamename,info.actionlists)} \n\t\t\t\t\t\tjumpto={(step) => this.jumpto(step)}\n\t\t\t\t\t/>\n\t\t\t\t\t<GameLocalStore\n\t\t\t\t\t\tstore={this.props.localstore}\n\t\t\t\t\t\tdeldata={(id) => this.deldata(id)}\n\t\t\t\t\t\tloadingdata= {(gamedata) => this.loadingdata(gamedata)}\n\t\t\t\t\t/>\n\t\t\t\t</section>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\t\n// ========================================\n\n\n\nGamePage.propTypes = {\n  squares: PropTypes.array,\n  list: PropTypes.array,\n  info: PropTypes.object,\n  addlist: PropTypes.func,\n  dellist: PropTypes.func,\n  addchess: PropTypes.func,\n  changeplayer: PropTypes.func,\n  endgame: PropTypes.func,\n  begingame: PropTypes.func,\n  beginboard: PropTypes.func,\n  clearlist: PropTypes.func\n}","/* No use function\n//set squares's value\nexport const SetSquareValue = ChessValue => Square => {\n\tSquare.value = ChessValue\n\treturn Square\n}\n//set square's owner ex:SetSquareOwner(\"player1\")(nowsquare)\nexport const SetSquareOwner = OwnValue => Square => {\n\tSquare.owner = OwnValue\n\treturn Square\n}\n//set square's lock\nexport const SetSquareLock = Lockvalue => Square => {\n\tSquare.lock = Lockvalue\n\treturn Square\n}\n*/\n// set chess to a square\nexport const setChessToSquares = (chess, squares) => {\n\tsquares[chess.rowskey][chess.columnskey] = {value: chess.value, owner: chess.owner, lock: chess.lock}\n\treturn squares\n}\n// add chess to list\nexport const addChessToLists = (chess={}, lists=[]) => lists.concat([chess])\n//take one square form Squares ex:TakeSquare(1,1)(nowsquares)\nexport const TakeSquare = (rowskey, columnkey) => Squares  => Squares[rowskey][columnkey]\n//check square's owner ex:CheckOwner(\"player1\")(nowsquare) No use function\n// export const CheckSquareOwner = OwnValue => Square  => (Square.owner  === OwnValue) ? true : false \n//check squre's lock ex:Checklock(nowsquare)\nexport const CheckSquareLock = (Square) => Square.lock\n//check square exist\nexport const CheckSquareExist = (rowslength,columnslength)  => (rowskey, columnskey) => rowskey >= 0 && rowskey < rowslength && columnskey >= 0 && columnskey < columnslength\n//check squre's value\nexport const CheckSquareValue = Value => Square => {\n\treturn(Square.value  === Value) ? 1 : 0\n}\n//delection point\n/*\nexport const DelPoint = (Square) => {\n\treturn compose(\n\t\tSetSquareOwner(\"\"),\n\t\tSetSquareValue(\"\")\n\t)(Square)\n}\n*/\n// copy squares\nexport const SquaresDeepCopy = (Squares) => \n{\n    let CopySquares = []\n    for (let i = 0, ilen = Squares.length ; i < ilen ; i++ )\n    {\n        let Nowrows = Squares[i]\n        CopySquares[i] = []\n        for (let j = 0, jlen = Nowrows.length ; j < jlen ; j++ )\n        {\n            CopySquares[i][j] = Object.assign({},Nowrows[j])\n        }\n    }\n    return CopySquares\n}","import  {CheckSquareValue, setChessToSquares, addChessToLists} from './gamebasics'\n\n//find max length for connect chesses by specil vextor\nexport const FindLength = (VectorX, VectorY) => connectlength => (CurrentPoint , NowSquares) => {\n    let contilen = 1\n    let CheckValue = CheckSquareValue(CurrentPoint.value)\n    let lengthx = NowSquares.length\n    for (let i = 1 ; i < connectlength ; i++) {\n        let tapointx = CurrentPoint.rowskey - i * VectorX\n        let tapointy = CurrentPoint.columnskey - i * VectorY\n        if ( tapointx >= 0 && tapointx < lengthx && tapointy >= 0 && tapointy < NowSquares[tapointx].length){\n            contilen += CheckValue(NowSquares[tapointx][tapointy])\n        }\n        else{\n            break\n        }\n    }\n    for (let j = 1 ; j< connectlength ; j ++) {\n        let tapointx = CurrentPoint.rowskey + j * VectorX\n        let tapointy =  CurrentPoint.columnskey + j * VectorY\n        if ( tapointx >= 0 && tapointx < lengthx && tapointy >= 0 && tapointy < NowSquares[tapointx].length){\n            contilen += CheckValue(NowSquares[tapointx][tapointy])\n        }\n        else{\n            break\n        }\n    }\n    return contilen\n}\n//find maxlength for row,Column ,Slash or BackSlash by Currying\nexport const Rowlength = FindLength(1,0) \nexport const Columnlength = FindLength(0,1)\nexport const Slashlength = FindLength(1,1)\nexport const BackSlashlength = FindLength(1,-1)\n//judge length exist\nexport const JudgeWinner = length => (CurrentPoint , Squares) =>\n{\n    return  Rowlength(length)(CurrentPoint,Squares) >= length || \n    Columnlength(length)(CurrentPoint,Squares) >= length ||\n    Slashlength(length)(CurrentPoint,Squares) >= length  ||\n    BackSlashlength(length)(CurrentPoint,Squares) >= length \n}\n// ============\n\n// remove the most old chess \nexport const removeOldChess = (ProcessObject = {}) => {\n    let squares = ProcessObject.squares\n    let lists = ProcessObject.lists\n    if (lists.length >= 6) {\n        let oldchess = {\n            rowskey: lists[0].rowskey,\n            columnskey: lists[0].columnskey,\n            value: \"\",\n            owner: \"\",\n            lock: false,\n        }\n        lists = lists.filter((_chess,index) => index !== 0)\n        squares = setChessToSquares(oldchess,squares)\n    }\n    ProcessObject.squares = squares\n    ProcessObject.lists = lists\n    return ProcessObject\n}\nexport const addNewChess = (ProcessObject = {}) => {\n    let chess = ProcessObject.chess\n//    console.log(chess)\n    ProcessObject.lists = addChessToLists(chess,ProcessObject.lists)\n\tProcessObject.actionlists = addChessToLists(chess,ProcessObject.actionlists)\n    ProcessObject.squares = setChessToSquares(chess,ProcessObject.squares)\n    return ProcessObject\n}\n\nexport const ConeectJudge = (length) => (ProcessObject = {}) => {\n    ProcessObject.gamestate =  (JudgeWinner(length)(ProcessObject.chess,ProcessObject.squares)) ? \"Game End\" : \"Game Playing\"\n    return ProcessObject\n}","import { compose } from 'redux';\nimport { GamePage } from \"../ui/page\";\nimport { SquaresDeepCopy } from \"../../functions/gamebasics\";\nimport { addNewChess, removeOldChess, ConeectJudge } from '../../functions/connectgame'\n\nexport class TioTeoTicSpecialForm extends GamePage {\n\tmainchange = (rowskey, columnskey) => {\n\t\tconst history = this.state.history.slice(0, this.state.gameinfo.turns + 1);\n    const current = history[history.length - 1];\n\t\tconst player = current.nowplayer\n\t\tconst info = this.state.gameinfo\n\t\tlet newsquares = SquaresDeepCopy(current.squares);\n\t\t// check broad is lock\n    if (newsquares[rowskey][columnskey].lock === true || info.gamestate === \"Game End\")\n\t\t\treturn\n\t\t// construct new chess\n\t\tconst  newchess = {\n\t\t\trowskey: rowskey,\n      columnskey: columnskey,\n      value: (player === \"player1\") ? \"BlackChess\" : \"WhiteChess\",\n\t\t\towner: player,\n\t\t\tlock: true,\n\t\t}\n\t\t// use compose function( from redux,js) to processing state, and get new state\n\t\tlet processobject = compose(\n\t\t\tConeectJudge(3),\n\t\t\taddNewChess,\n\t\t\tremoveOldChess\n\t)({\n\t\tsquares: newsquares,\n\t\tlists: current.showlists.slice(),\n\t\tactionlists: info.actionlists.slice(),\n\t\tchess: newchess,\n\t\tgamestate: info.gamestate,\n\t})\n\t\t// set state\n\t\tlet winner = \"\"\n\t\tlet loser = \"\"\n\tif (processobject.gamestate === \"Game End\") {\n\t\t\twinner = player\n\t\t\tloser = (player === \"player1\") ? \"player2\" : \"player1\"\n\t\t}\n\t\tthis.setState({\n\t\t\thistory: history.concat([\n\t\t\t\t{\n\t\t\t\t\tsquares: processobject.squares,\n\t\t\t\t\tshowlists: processobject.lists,\n\t\t\t\t\tnowplayer: (player === \"player1\") ? \"player2\" : \"player1\"\n\t\t\t\t}]),\n\t\t\tgameinfo: {\n\t\t\t\t...info,\n\t\t\t\tactionlists: processobject.actionlists,\n\t\t\t\tturns: info.turns + 1,\n\t\t\t\tgamestate: processobject.gamestate,\n\t\t\t\twinner: winner,\n\t\t\t\tloser: loser,\n\t\t\t},\n\t\t\t})\n  }\n}\n\n// ========================================\n\nexport class TioTeoTicForm extends GamePage {\n\tmainchange = (rowskey, columnskey) => {\n\t\tconst history = this.state.history.slice(0, this.state.gameinfo.turns + 1);\n    const current = history[history.length - 1];\n\t\tconst player = current.nowplayer\n\t\tconst info = this.state.gameinfo\n\t\tlet newsquares = SquaresDeepCopy(current.squares);\n\t\t// check broad is lock\n    if (newsquares[rowskey][columnskey].lock === true || info.gamestate === \"Game End\")\n\t\t\treturn\n\t\t// construct new chess\n\t\tconst  newchess = {\n\t\t\trowskey: rowskey,\n      columnskey: columnskey,\n      value: (player === \"player1\") ? \"BlackChess\" : \"WhiteChess\",\n\t\t\towner: player,\n\t\t\tlock: true,\n\t\t}\n\t\t// use compose function( from redux,js) to processing state, and get new state\n\t\tlet processobject = compose(\n\t\t\tConeectJudge(3),\n\t\t\taddNewChess\n\t)({\n\t\tsquares: newsquares,\n\t\tlists: current.showlists.slice(),\n\t\tactionlists: info.actionlists.slice(),\n\t\tchess: newchess,\n\t\tgamestate: info.gamestate,\n\t})\n\t\t// set state\n\t\tlet winner = \"\"\n\t\tlet loser = \"\"\n\tif (processobject.gamestate === \"Game End\") {\n\t\t\twinner = player\n\t\t\tloser = (player === \"player1\") ? \"player2\" : \"player1\"\n\t\t}\n\t\tthis.setState({\n\t\t\thistory: history.concat([\n\t\t\t\t{\n\t\t\t\t\tsquares: processobject.squares,\n\t\t\t\t\tshowlists: processobject.lists,\n\t\t\t\t\tnowplayer: (player === \"player1\") ? \"player2\" : \"player1\"\n\t\t\t\t}]),\n\t\t\tgameinfo: {\n\t\t\t\t...info,\n\t\t\t\tactionlists: processobject.actionlists,\n\t\t\t\tturns: info.turns + 1,\n\t\t\t\tgamestate: processobject.gamestate,\n\t\t\t\twinner: winner,\n\t\t\t\tloser: loser,\n\t\t\t},\n\t\t\t})\n  }\n}\n\nexport class GomokuForm extends GamePage {\n\tmainchange = (rowskey, columnskey) => {\n\t\tconst history = this.state.history.slice(0, this.state.gameinfo.turns + 1);\n    const current = history[history.length - 1];\n\t\tconst player = current.nowplayer\n\t\tconst info = this.state.gameinfo\n\t\tlet newsquares = SquaresDeepCopy(current.squares);\n\t\t// check broad is lock\n    if (newsquares[rowskey][columnskey].lock === true || info.gamestate === \"Game End\")\n\t\t\treturn\n\t\t// construct new chess\n\t\tconst  newchess = {\n\t\t\trowskey: rowskey,\n      columnskey: columnskey,\n      value: (player === \"player1\") ? \"BlackChess\" : \"WhiteChess\",\n\t\t\towner: player,\n\t\t\tlock: true,\n\t\t}\n\t\t// use compose function( from redux,js) to processing state, and get new state\n\t\tlet processobject = compose(\n\t\t\tConeectJudge(5),\n\t\t\taddNewChess\n\t)({\n\t\tsquares: newsquares,\n\t\tlists: current.showlists.slice(),\n\t\tactionlists: info.actionlists.slice(),\n\t\tchess: newchess,\n\t\tgamestate: info.gamestate,\n\t})\n\t\t// set state\n\t\tlet winner = \"\"\n\t\tlet loser = \"\"\n\tif (processobject.gamestate === \"Game End\") {\n\t\t\twinner = player\n\t\t\tloser = (player === \"player1\") ? \"player2\" : \"player1\"\n\t\t}\n\t\tthis.setState({\n\t\t\thistory: history.concat([\n\t\t\t\t{\n\t\t\t\t\tsquares: processobject.squares,\n\t\t\t\t\tshowlists: processobject.lists,\n\t\t\t\t\tnowplayer: (player === \"player1\") ? \"player2\" : \"player1\"\n\t\t\t\t}]),\n\t\t\tgameinfo: {\n\t\t\t\t...info,\n\t\t\t\tactionlists: processobject.actionlists,\n\t\t\t\tturns: info.turns + 1,\n\t\t\t\tgamestate: processobject.gamestate,\n\t\t\t\twinner: winner,\n\t\t\t\tloser: loser,\n\t\t\t},\n\t\t\t})\n  }\n}\n\n","import { compose } from 'redux';\n import { GamePage } from \"../ui/page\";\nimport { SquaresDeepCopy ,  addChessToLists, setChessToSquares} from \"../../functions/gamebasics\";\nimport { calculationArrays } from \"../../functions/catchgame\";\n\nexport class OthelloForm extends GamePage {\n\tmainchange = (rowskey, columnskey) => {\n\t\tconst history = this.state.history.slice(0, this.state.gameinfo.turns + 1);\n\t\tconst current = history[history.length - 1];\n\t\tconst player = current.nowplayer\n\t\tconst info = this.state.gameinfo\n\t\tlet newsquares = SquaresDeepCopy(current.squares);\n\t\t// check broad is lock\n    if (newsquares[rowskey][columnskey].lock === true || info.gamestate === \"Game End\")\n\t\t\treturn\n\t\t// construct new chess\n\t\tconst  newchess = {\n\t\t\trowskey: rowskey,\n      columnskey: columnskey,\n      value: (player === \"player1\") ? \"BlackChess\" : \"WhiteChess\",\n\t\t\towner: player,\n\t\t\tlock: true,\n\t\t}\n\t\t// use compose function( from redux,js) to processing state, and get new state\n\t\tlet processobject = compose(\n\t\t\tJudgeGame,\n\t\t\torganizeBoard,\n\t\t\taddNewChess,\n\t)({\n\t\tsquares: newsquares,\n\t\tplayer1chess: current.player1chess,\n\t\tplayer2chess: current.player2chess,\n\t\tactionlists: info.actionlists.slice(),\n\t\tchess: newchess,\n\t\tgamestate: info.gamestate,\n\t})\n\t\t// set state\n\t\tlet winner = \"\"\n\t\tlet loser = \"\"\n\t\tif (processobject.gamestate === \"Game End\") {\n\t\t\tif (processobject.player1chess > processobject.player2chess) {\n\t\t\t\twinner = \"player1\"\n\t\t\t\tloser = \"player2\"\n\t\t\t}\n\t\t\telse if (processobject.player2chess > processobject.player1chess) {\n\t\t\t\twinner = \"player2\"\n\t\t\t\tloser = \"player1\"\n\t\t\t}\n\t\t\telse {\n\t\t\t\twinner = \"No Winner\"\n\t\t\t\tloser = \"No Loser\"\n\t\t\t}}\n\t\tthis.setState({\n\t\t\thistory: history.concat([\n\t\t\t\t{\n\t\t\t\t\tsquares: processobject.squares,\n\t\t\t\t\tplayer1chess:  processobject.player1chess,\n\t\t\t\t\tplayer2chess:  processobject.player2chess,\t\n\t\t\t\t\tnowplayer: (player === \"player1\") ? \"player2\" : \"player1\"\n\t\t\t\t}]),\n\t\t\tgameinfo: {\n\t\t\t\t...info,\n\t\t\t\tactionlists: processobject.actionlists,\n\t\t\t\tturns: info.turns + 1,\n\t\t\t\tgamestate: processobject.gamestate,\n\t\t\t\twinner: winner,\n\t\t\t\tloser: loser,\n\t\t\t},\n\t\t})\n}\n}\n\n//--------------------------------------\n\nconst addNewChess = (ProcessObject = {}) => {\n\tlet chess = ProcessObject.chess\n\tProcessObject.actionlists = addChessToLists(chess,ProcessObject.actionlists)\n\tProcessObject.squares = setChessToSquares(chess,ProcessObject.squares)\n\treturn ProcessObject\n}\nconst organizeBoard = (ProcessObject = {}) => {\n\tlet chess = ProcessObject.chess\n\tlet squares = ProcessObject.squares\n\tlet player = chess.owner\n\t//caculate the array to change chess\tand flatten 2-dimension-array to 1-dimension-array\n\tconst changeArrays = calculationArrays(chess, squares).reduce((accumulator,currentValue)=> accumulator.concat(currentValue),[])\n\tlet changenumber = changeArrays.length\n\t//change chess by array\n\tif (changenumber > 0){\n\t\tProcessObject.squares = changeArrays.reduce((presquares,nowchess) => setChessToSquares(nowchess,presquares),squares)\n\t}\n\t//re-caculate the number of player's chess\n\tif (player === \"player1\") {\n\t\tProcessObject.player1chess += changenumber + 1\n\t\tProcessObject.player2chess -= changenumber\n\t}\n\telse {\n\t\tProcessObject.player1chess -= changenumber\n\t\tProcessObject.player2chess += changenumber + 1\n\t}\n\treturn ProcessObject\n}\nconst JudgeGame = (ProcessObject = {}) => {\n\tlet player1chess = ProcessObject.player1chess\n\tlet player2chess = ProcessObject.player2chess\n\tif ( /*(player1chess === 0) || (player2chess === 0) || */(player1chess + player2chess >= 64) ) {\n\t\tProcessObject.gamestate = \"Game End\"\n\t}\n\telse {\n\t\tProcessObject.gamestate = \"Game Playing\"\n\t}\n\treturn ProcessObject\n}","\nexport const calculationArrays = (chess ={}, squares = []) => {\n\tlet resultArray = []\n\tlet targetvalue = chess.value\n\tlet lengthx = squares.length\n\tfor (let i = 0 ; i < 9 ; i++) {\n\t\tlet vec = [Math.floor( i / 3) - 1 ,(i % 3) - 1]\n\t\tresultArray[i] = []\n\t\tif (vec === [0,0]) {\n\t\t\tcontinue\n\t\t}\n\t\tfor (let j = 1, jth = lengthx ; j < jth ; j ++) {\n\t\t\tlet tapointx = chess.rowskey + vec[0] * j\n\t\t\tlet tapointy = chess.columnskey + vec[1] * j\n\t\t\tlet tavalue = \"\"\n\t\t\tif ( tapointx >= 0 && tapointx < lengthx && tapointy >= 0 && tapointy < squares[tapointx].length) {\n\t\t\t\ttavalue = squares[chess.rowskey + vec[0] * j][chess.columnskey + vec[1] * j].value\n\t\t\t}\n\t\t\tif (tavalue === \"\") {\n\t\t\t\tresultArray[i] = []\n\t\t\t\tbreak\n\t\t\t}\n\t\t\telse if (tavalue === targetvalue) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\telse if (tavalue !== targetvalue) {\n\t\t\t\tresultArray[i][j - 1] = {\n\t\t\t\t\trowskey: chess.rowskey + vec[0] * j ,\n\t\t\t\t\tcolumnskey: chess.columnskey + vec[1] * j ,\n\t\t\t\t\tvalue: chess.value,\n\t\t\t\t\towner: chess.owner,\n\t\t\t\t\tlock: chess.lock\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn resultArray\n}\n","import React from 'react'\nimport fetch from 'isomorphic-fetch';\n\nexport \tclass  HomeForm extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.movegamedata = this.props.movegamedata.bind(this) \n\t\tthis.moveplayerdata = this.props.moveplayerdata.bind(this)\n\t\tthis.playerdata = this.props.playerdata\n\t\tthis.clear = this.clear.bind(this)\n\t\tthis.loadingonlinedata = this.loadingonlinedata.bind(this)\n\t\tthis.processdata = this.processdata.bind(this)\n\t}\n\tloadingonlinedata(url) {\n\t\tfetch(url)\n\t\t.then(response => response.json())\n\t\t.then(onlinedata => this.processdata(onlinedata))\n\t}\n\tprocessdata(data) {\n\t\tthis.movegamedata(data.playerdata.player1,data.playerdata.player2)\n\t\tthis.moveplayerdata(data.gameDatas)\n\t}\n\tclear() {\n\t\tthis.movegamedata([])\n\t\tthis.moveplayerdata(\"Tom\",\"Jerry\")\n\t}\n\trender() {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h1>遊戲玩家</h1>\n\t\t\t\t\t\t<div>{`遊戲玩家１：${this.props.playerdata.player1}`}</div>\n\t\t\t\t\t\t<div>{`遊戲玩家２：${this.props.playerdata.player2}`}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h1>讀取伺服器記錄，但是還沒架設伺服器就是了</h1>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t<input type=\"buttom\" value=\"回復初始\" onClick={() => this.clear()} />\t\t\t\t\t\t\n\t\t\t\t\t\t<input type=\"buttom\" value=\"讀取存檔１\" onClick={() => this.loadingonlinedata(\"url1\")} />\n\t\t\t\t\t\t<input type=\"buttom\" value=\"讀取存檔２\" onClick={() => this.loadingonlinedata(\"url2\")} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p>如果沒有載入預設的遊戲玩家的名稱，請先按一下“回復初始”按鍵來強制載入遊戲玩家的名稱</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\t\t}","import {connect } from 'react-redux';\nimport { AddGameData, DelGameData, LoadingGameDada } from \"../../redux/actions/GameDataAction\";\nimport { ChangePlayerName } from \"../../redux/actions/PlayerDataAction\";\nimport { TioTeoTicForm, TioTeoTicSpecialForm, GomokuForm } from \"./TioTeoTic\";\nimport { OthelloForm } from \"./othello\";\nimport { HomeForm } from \"./home\";\n\n\n//Incoming store with special game-name\nconst mapStateToProps = gamename => state => ({\n\tlocalstore: (state.gameDatas.length !== 0) ?\n\tstate.gameDatas.filter((gamedata) => gamedata.gamename === gamename) :\n\t[],\n\tplayers: state.playerData\n})\n\n// coonect dispatch and method\nconst mapDispatchToProps = dispatch => ({\n\tdeldata(id) {\n\t\tdispatch(DelGameData(id))\n\t},\n\tadddata(gamename,actionlists) {\n\t\tdispatch(AddGameData(gamename,actionlists))\n\t}\n})\n\n//HOC for connect Ui-component , game-name, state and dispatch\nconst HOCforconnect = (component, gamename) => {\n\treturn connect(\n\t\tmapStateToProps(gamename),\n\t\tmapDispatchToProps\n\t\t)(component)\n}\n\nexport const TioTeoTicSpecialGame = HOCforconnect(TioTeoTicSpecialForm, \"TioTeoTicSpecial\")\nexport const TioTeoTicGame = HOCforconnect(TioTeoTicForm, \"TioTeoTic\")\nexport const GomokuGame = HOCforconnect(GomokuForm, \"Gomoku\")\nexport const OthelloGame = HOCforconnect(OthelloForm,\"Othello\")\n\nexport const HomePage = connect(\n\tstate => ({\n\t\tplayerdata: state.playerData\n\t}),\n\tdispatch => ({\n\t\tmoveplayerdata(player1,player2) {\n\t\t\tdispatch(ChangePlayerName(player1,player2))\n\t\t},\n\t\tmovegamedata(data) {\n\t\t\tdispatch(LoadingGameDada(data))\n\t\t}\n\t})\n\t)(HomeForm)\n","import { GAMEDATA } from \"../constants\";\nimport { v4 } from 'uuid';\n\nexport const AddGameData = (gamename,chesshistory) => ({\n\ttype: GAMEDATA.ADD_GAMEDATA,\n\tid: v4(),\n\tgamename,\n\tdate: new Date(),\n\tchesshistory,\n})\n\nexport const DelGameData = (id) => ({\n\ttype: GAMEDATA.DEL_GAMEDATA,\n\tid,\n})\n\nexport const LoadingGameDada = (gameDatas) => ({\n\ttype: GAMEDATA.LOADING_GAMEDATA,\n\tgameDatas,\n})","import { PLAYERDATA } from \"../constants\";\n\nexport const ChangePlayerName = (player1,player2) => ({\n\ttype: PLAYERDATA.RE_NAME,\n\tplayer1,\n\tplayer2,\n})\n","\n\nexport const makeEmptyBoard = (row,column) => Array(row).fill(Array(column).fill({value:\"\", owner:\"\", lock: false}))\n\nexport const makeGameHistoryObject = (board,objecta = {}) => Object.assign({\tnowplayer: \"player1\"},{squares: board},objecta)\n\t\nexport const makeGameInfoObject = (gamename) => ({\n\tgamename,\n\tgamestate: \"Game Begin\",\n\twinner: \"\",\n\tloser: \"\",\n\tturns: 0,\n\tactionlists: [],\n})\n\n//\n\nconst TicTacToeBoard = makeEmptyBoard(3,3)\nconst TicTacToeNeedKey = {showlists : []}\n\nexport const TicTacToeInitialData = {\n\thistory: [makeGameHistoryObject(TicTacToeBoard,TicTacToeNeedKey)],\n\tgameinfo: makeGameInfoObject(\"TioTeoTic\"),\n}\n\nexport const TicTacToeSpecialInitialData = {\n\thistory: [makeGameHistoryObject(TicTacToeBoard,TicTacToeNeedKey)],\n\tgameinfo: makeGameInfoObject(\"TioTeoTicSpecial\"),\n}\n\n//\nconst GomokuBoard = makeEmptyBoard(15,15)\nexport const GomokuInitialData = {\n\thistory: [makeGameHistoryObject(GomokuBoard,TicTacToeNeedKey)],\n\tgameinfo: makeGameInfoObject(\"Gomoku\"),\n}\n\n//\n\n\t\nlet  OthelloStartArray = [\n\t{rowskey: 3, columnskey: 3, value: \"BlackChess\", owner: \"player1\", lock: true},\n\t// {rowskey: 3, columnskey: 4, value: \"WhiteChess\", owner: \"player1\", lock: true},\n\t// {rowskey: 4, columnskey: 3, value: \"WhiteChess\", owner: \"player1\", lock: true},\n\t// {rowskey: 4, columnskey: 4, value: \"BlackChess\", owner: \"player1\", lock: true}\n]\n\nlet  OthelloStartBoard = makeEmptyBoard(8,8)\n\nexport const setChessToSquareskk = (chess, squares) => {\n\tsquares[chess.rowskey][chess.columnskey] = {value: chess.value, owner: chess.owner, lock: chess.lock}\n\treturn squares\n}\n\n\nexport const BoardProcessedChess = (chessarray, Board) => {\n\t//chessarray.reduce((presquares,nowchess) => setChessToSquareskk(nowchess,presquares),Board)\n\treturn Board\n\t}\n\nlet OthelloBoard = BoardProcessedChess(OthelloStartArray,OthelloStartBoard)\n\n\nconst OthelloNeedKey = { player1chess:  0,\tplayer2chess:  0 }\n\n\n\nexport const OthelloInitialData = {\n\thistory: [makeGameHistoryObject(OthelloBoard,OthelloNeedKey)],\n\tgameinfo: makeGameInfoObject(\"Othello\"),\n}\n\n/*\nexport const OthelloInitialData ={\n\thistory: [{\n\t\t\t\t\tsquares : Array(8).fill(Array(8).fill({value:\"\", owner:\"\", lock: false})), // construct 8* 8 squares \n\t\t\t\t\tplayer1chess:  0,\n\t\t\t\t\tplayer2chess:  0,\n\t\t\t\t\tnowplayer: \"player1\"\n\t}],\n\tgameinfo:{\n\t\t\t\t\tgamename: \"Othello\",\n\t\t\t\t\tgamestate: \"Game Begin\",\n\t\t\t\t\tplayer1: \"Tom\",\n\t\t\t\t\tplayer2: \"Jerry\",\n\t\t\t\t\twinner: \"\",\n\t\t\t\t\tloser:\"\",\n\t\t\t\t\tturns: 0,\n\t\t\t\t\tactionlists:[],\n\t},\n}\n*/","import React from 'react'\n\nexport const PAGES = [\n\t{\n\t\tid: \"TicTacToe\",\n\t\trouter: \"/TicTacToe\",\n\t\tzh_name: \"井字棋\"\n\t},\n\t{\n\t\tid: \"TicTacToeSpecial\",\n\t\trouter: \"/TicTacToeSpecial\",\n\t\tzh_name: \"井字棋變化版\"\n\t},\t\n\t{\n\t\tid: \"Othello\",\n\t\trouter: \"/Othello\",\n\t\tzh_name: \"黑白棋\"\n\t}\n]\nexport const TicTacToeRule =  \n\t<React.Fragment>\n\t\t<li>雙方輪流放子</li>\n\t\t<li>先連成一線者得勝</li>\n\t</React.Fragment>\n\n\texport const TicTacToeSpecialRule = \n\t<React.Fragment>\n\t\t<li>是井字棋的變化版</li>\n\t\t<li>雙方輪流放子</li>\n\t\t<li>先連成一線者得勝</li>\n\t\t<li>當現在盤面上有六顆棋子時。在第七個棋子落下前，會先移出最早放的棋子，再放下第七顆</li>\n\t</React.Fragment>\n\n\texport const GomokuRule = \n\t<React.Fragment>\n\t\t<li>是五子棋的”極簡化版“</li>\n\t\t<li>雙方輪流放子</li>\n\t\t<li>先連成一線者得勝</li>\n\t\t<li>之後也許會把棋盤換成圍棋用棋盤</li>\n\t\t<li>還沒有設定連珠規則或RIF規則，之後會補上功能</li>\n\t</React.Fragment>\n\n\n\texport const OthelloRule = \n\t<React.Fragment>\n\t\t<li>是奧賽羅棋的”極簡化版“</li>\n\t\t<li>雙方輪流放子</li>\n\t\t<li>當棋盤上都放滿棋子時，棋子多的玩家得勝</li>\n\t\t<li>還沒有設定起始棋子，之後會補上功能</li>\n\t\t<li>還沒有限制下棋子的地方，之後會補上功能</li>\n\t</React.Fragment>\n","import React from 'react';\nimport { MainMenu } from './MainMenu'\nimport '../../stylesheets/pages.scss'\nimport { OthelloGame, TioTeoTicGame, TioTeoTicSpecialGame, GomokuGame,HomePage } from \"../contain/contain\";\nimport { OthelloInitialData, TicTacToeInitialData ,GomokuInitialData ,TicTacToeSpecialInitialData} from \"./initialstatedata\";\nimport { OthelloRule, TicTacToeRule, TicTacToeSpecialRule, GomokuRule } from \"../../data/gamerule\";\n\nconst PageTemplate = ({children}) =>\n    <div className=\"page\">\n        <MainMenu />\n        {children}\n    </div>\n\nexport const Home = () =>\n<PageTemplate>\n    <HomePage />\n</PageTemplate>\n\n\n    export const TicTacToe = () =>\n    <PageTemplate>\n            <TioTeoTicGame initialstate = {TicTacToeInitialData} gamerule={TicTacToeRule} />\n    </PageTemplate>\n\n    export const TicTacToeSpecial = () =>\n    <PageTemplate>\n            <TioTeoTicSpecialGame initialstate = {TicTacToeSpecialInitialData} gamerule={TicTacToeSpecialRule} />\n    </PageTemplate>\n\n    export const Gomoku = () =>\n    <PageTemplate>\n            <GomokuGame initialstate = {GomokuInitialData} gamerule={GomokuRule} />\n    </PageTemplate>\n\n    \nexport const Othello = () =>\n    <PageTemplate>\n        <OthelloGame initialstate = {OthelloInitialData} gamerule={OthelloRule} />\n    </PageTemplate>\n\nexport const Whoops404 = ({ location }) =>\n    <div className=\"Whoops-404\">\n        <hi>找不到以'{location.pathname}'為名稱的分頁</hi>\n    </div>","import { PLAYERDATA } from \"../constants\"\n\nexport const playerData = (state = {}, action) => {\n\tswitch (action.type) {\n\t\tcase PLAYERDATA.RE_NAME:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tplayer1: action.player1,\n\t\t\t\tplayer2: action.player2,\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","import { GAMEDATA } from \"../constants\";\n\nexport const gameData = (state = [], action) => {\n\tswitch (action.type) {\n\t\tcase GAMEDATA.ADD_GAMEDATA:\n\t\t\treturn [{\n\t\t\t\tid: action.id,\n\t\t\t\tgamename: action.gamename,\n\t\t\t\tdate: action.date,\n\t\t\t\tchesshistory: action.chesshistory,\n\t\t\t}]\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport const gameDatas = (state = [] , action) => {\n\tswitch (action.type) {\n\t\tcase GAMEDATA.ADD_GAMEDATA:\n\t\t\treturn state.concat(gameData([],action))\n\t\tcase GAMEDATA.DEL_GAMEDATA:\n\t\t\treturn state.filter((data) => data.id !== action.id)\n\t\tcase GAMEDATA.LOADING_GAMEDATA:\n\t\t\treturn action.gameDatas\n\t\tdefault:\n\t\t\treturn state\n\t}\n}","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport {playerData  } from \"./reducers/PlayerDataReducers\";\nimport { gameDatas } from \"./reducers/GameDataReducer\";\n\nconst initialDate ={\n\tgameDatas:[],\n\tplayerData:{\n\t\tplayer1: \"Tom1\",\n\t\tplayer2: \"Jerry1\",\n\t},\n}\n\nconst logger = store => next => action => {\n\tlet result\n\t//console.groupCollapsed(\"dispatching\", action.type)\n\t//console.log('prev state' , store.getState())\n\t//console.log('action', action)\n\tresult = next(action)\n\t//console.log('next state', store.getState())\n\t//console.groupEnd()\n\treturn result\n}\n\nconst saver = store => next => action => {\n\tlet result = next(action)\n\tlocalStorage['redux-store'] = JSON.stringify(store.getState())\n\treturn result\n}\n\nexport const storeFactory = (initialState = initialDate ) =>(\n\tapplyMiddleware(logger, saver)(createStore)(\n\t\tcombineReducers({gameDatas, playerData}) ,\n\t\t(localStorage['redux-store']) ?\n\t\tJSON.parse(localStorage['redux-store']) :\n\t\tinitialState\n\t)\n)\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux';\nimport {\n  HashRouter,\n  Route,\n  Switch\n} from 'react-router-dom'\nimport * as Pages from './components/menu/pages'\nimport { PAGES } from \"./data/pagesconster\";\nimport { storeFactory } from \"./redux/Store\";\n\nwindow.React = React\n\nconst initialDate ={\n\tgameDatas:[],\n\tplayerData:{\n\t\tplayer1: \"Tom\",\n\t\tplayer2: \"Jerry\",\n\t},\n}\n\n\nconst store = storeFactory(initialDate)\n\nrender(\n  <Provider store={store} >\n  <HashRouter>\n  <div className=\"main\" >\n  <Switch>\n  <Route exact path=\"/\" component={Pages[\"Home\"]} />\n  {// Use conster of Pages to map Route\n    PAGES.map((page,index) => {\n    return <Route key={index} path={page.router} component={Pages[page.id]} />\n  })}\n  <Route component={Pages.Whoops404} />\n  </Switch>\n  </div>\n  </HashRouter>\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}